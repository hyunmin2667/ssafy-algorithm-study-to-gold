package algo_study;

import java.io.*;
import java.util.*;

public class BOJ_9372_travel {
    static int N, M, ans;
    static int[][] adjMatrix;
    static boolean[] visit;

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());

        StringBuilder sb = new StringBuilder();

        for (int t = 0; t < T; t++) {
            ans = 0;
            StringTokenizer st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            M = Integer.parseInt(st.nextToken());

            adjMatrix = new int[N + 1][N + 1];
            visit = new boolean[N + 1];
            for (int i = 0; i < M; i++) {
                st = new StringTokenizer(br.readLine());
                int a = Integer.parseInt(st.nextToken());
                int b = Integer.parseInt(st.nextToken());

                adjMatrix[a][b] = 1;
                adjMatrix[b][a] = 1;
            }

            bfs();

            sb.append(ans - 1).append("\n");
        }

        System.out.println(sb);
    }

    static void bfs() {
        Queue<Integer> q = new ArrayDeque<>();
        q.offer(1);
        visit[1] = true;
        while (!q.isEmpty()) {
            ans++;
            int value = q.poll();

            for (int i = 1; i <= N; i++) {
                if (adjMatrix[value][i] != 0 && !visit[i]) {
                    visit[i] = true;
                    q.offer(i);
                }
            }
        }
    }
}
