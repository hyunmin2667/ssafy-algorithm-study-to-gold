import java.io.*;
import java.util.*;

public class Main {
    static int N, M, K, count;
    static int[][] map;
    static int[] dx = { 1, -1, 0, 0 };
    static int[] dy = { 0, 0, 1, -1 };

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        StringBuilder sb = new StringBuilder();
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        map = new int[N][M];

        for (int i = 0; i < K; i++) {
            st = new StringTokenizer(br.readLine());
            int x1 = Integer.parseInt(st.nextToken());
            int y1 = Integer.parseInt(st.nextToken());
            int x2 = Integer.parseInt(st.nextToken());
            int y2 = Integer.parseInt(st.nextToken());

            for (int y = y1; y < y2; y++) {
                for (int x = x1; x < x2; x++) {
                    map[y][x] = 1; // 직사각형이 만들어지는 곳은 1로 변경
                }
            }
        }

        ArrayList<Integer> areaCount = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (map[i][j] == 0) {
                    count = 0; // 영역 개수 초기화
                    dfs(i, j);
                    areaCount.add(count);
                }
            }
        }

        Collections.sort(areaCount); // 오름차순 정렬

        sb.append(areaCount.size()).append('\n'); // Size = 영역의 개수
        for (int i : areaCount) {
            sb.append(i + " ");
        }

        System.out.println(sb);
    }

    static void dfs(int x, int y) {
        map[x][y] = 1;
        count++; // 영역의 개수 증가

        for (int k = 0; k < 4; k++) {
            int nx = x + dx[k];
            int ny = y + dy[k];

            if (0 <= nx && nx < N && 0 <= ny && ny < M) {
                if (map[nx][ny] == 0) {
                    dfs(nx, ny);
                }
            }
        }
    }
}
